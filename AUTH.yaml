openapi: 3.0.0
info:
  title: Auth
  version: 0.0.0
  description: Manage clients and Lynx users authorization and authentication
  termsOfService: 'http://lynx-project.eu/terms/'
  contact:
    name: Lynx-Project API Team
    email: apiteam@lynx-project.eu
    url: 'https://lynx-project.eu'
tags:
  - name: Authorization
  - name: User management
  - name: Client management
paths:
  /auth/oauth/check_token:
    post:
      tags:
        - Authorization
      summary: >-
        The token introspection endpoint for all Lynx resource servers (https://www.oauth.com/oauth2-servers/token-introspection-endpoint/)
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          x-www-form-urlencoded:
            schema:
              type: object
              properties:
                token:
                  title: The token
                  type: string
      responses:
        '200':
          description: >-
            The token is valid, the response is a JSON object with information
            about the token and his owner
          content:
            application/json:
              schema:
                properties:
                  aud:
                    type: array
                    items:
                      type: string
                  user_name:
                    type: string
                  scope:
                    type: array
                    items:
                      type: string
                  active:
                    type: boolean
                  exp:
                    type: integer
                  authorities:
                    type: array
                    items:
                      type: string
                  jti:
                    type: string
                  client_id:
                    type: string
                example:
                  active: true
                  exp: 1531124443
                  authorities:
                    - CUATRECASAS_CLIENT
                  jti: e7400f30-216e-4f1b-bd37-be0eaa6a9e75
                  client_id: cuatrecasas
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/oauth/token:
    post:
      tags:
        - Authorization
      summary: >-
        Grant a new token, the supported grant types are "client_credentials"
        and "password"
      security:
        - basicAuth: []
      requestBody:
        required: true
        description: >-
          If grant_type is set to "password" then username and password properties
          are required
        content:
          x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                scope:
                  type: string
                username:
                  type: string
                password:
                  type: string
              required:
                - grant_type
                - scope
              example:
                grant_type: client_credentials
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                  expires_in:
                    type: integer
                  scope:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  '/auth/users/{username}':
    get:
      tags:
        - User management
      summary: Get an user
      security:
        - oAuth2: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: The username of the user
      responses:
        '200':
          description: An user JSON object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - User management
      summary: Create a new user or update an already existing one
      security:
        - oAuth2: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: The username of the user to be created or modified
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
      responses:
        '204':
          description: The user has been successfully updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    patch:
      tags:
        - User management
      summary: Update an existing user
      security:
        - oAuth2: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: The username of the user to be updated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
      responses:
        '204':
          description: The user has been successfully updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - User management
      summary: Delete an existing user
      security:
        - oAuth2: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: The username of the user to be deleted
      responses:
        '204':
          description: The user has been successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /auth/users:
    get:
      tags:
        - User management
      summary: Get all users
      security:
        - oAuth2: []
      responses:
        '200':
          description: A JSON array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags:
        - User management
      summary: Create a new user
      security:
        - oAuth2: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: The user has been successfully created
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: The client_id specified already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  '/auth/clients/{client_id}':
    get:
      tags:
        - Client management
      summary: Get a client
      security:
        - oAuth2: []
      parameters:
        - in: path
          name: client_id
          required: true
          schema:
            type: string
          description: The username of the user
      responses:
        '200':
          description: A client JSON object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Client management
      summary: Create a new client or update an already existing one
      security:
        - oAuth2: []
      parameters:
        - in: path
          name: client_id
          required: true
          schema:
            type: string
          description: The username of the user to be created or modified
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientInfo'
      responses:
        '204':
          description: The user has been successfully updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags:
        - Client management
      summary: Update an existing client
      security:
        - oAuth2: []
      parameters:
        - in: path
          name: client_id
          required: true
          schema:
            type: string
          description: The client_id of the client to be updated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientInfo'
      responses:
        '204':
          description: The client has been successfully updated
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Client management
      summary: Delete an existing client
      security:
        - oAuth2: []
      parameters:
        - in: path
          name: client_id
          required: true
          schema:
            type: string
          description: The client_id of the client to be deleted
      responses:
        '204':
          description: The client has been successfully deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /auth/clients:
    get:
      tags:
        - Client management
      summary: Get all clients
      security:
        - oAuth2: []
      responses:
        '200':
          description: A JSON array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags:
        - Client management
      summary: Create a new client
      security:
        - oAuth2: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        '201':
          description: The Client has been successfully created
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: The client_id specified already exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
components:
  securitySchemes:
    oAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: /oauth/token
        password:
          tokenUrl: /oauth/token
    basicAuth:
      type: http
      scheme: basic
      description: The client_id and the client_secret
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
    NotFound:
      description: NotFound
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
  schemas:
    Client:
      allOf:
        - properties:
            client_id:
              type: string
        - $ref: '#/components/schemas/ClientInfo'
        - required:
            - client_id
          example:
            client_id: openlaws
            client_secret: secret
            authorize_grant_types:
              - client_credentials
            authorities:
              - ROLE_OPENLAWS_PREMIUM
            redirect_uri:
              - 'https://openlaws.com/?'
    User:
      allOf:
        - properties:
            username:
              type: string
        - $ref: '#/components/schemas/UserInfo'
        - required:
            - username
          example:
            username: admin
            password: admin
            account_non_epired: true
            account_non_locked: true
            credentials_non_expired: true
            enabled: true
            authorities:
              - ROLE_ADMIN
    ClientInfo:
      properties:
        client_secret:
          type: string
        scope:
          type: array
          items:
            type: string
        resource_ids:
          type: array
          items:
            type: string
        authorized_grant_types:
          type: array
          items:
            type: string
        authorities:
          type: array
          items:
            type: string
        redirect_uri:
          type: array
          items:
            type: string
        access_token_validity:
          type: integer
        refresh_token_validity:
          type: integer
      required:
        - client_secret
      example:
        client_secret: secret
        authorize_grant_types:
          - client_credentials
        authorities:
          - ROLE_OPENLAWS_PREMIUM
        redirect_uri:
          - 'https://openlaws.com/?'
    UserInfo:
      properties:
        password:
          type: string
        account_non_expired:
          type: boolean
        account_non_locked:
          type: boolean
        credentials_non_expired:
          type: boolean
        enabled:
          type: boolean
        authorities:
          type: array
          items:
            type: string
      required:
        - password
      example:
        password: admin
        account_non_epired: true
        account_non_locked: true
        credentials_non_expired: true
        enabled: true
        authorities:
          - ROLE_ADMIN
    ErrorModel:
      type: object
      properties:
        status:
          type: string
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        debugMessage:
          type: string
